diff --git a/exachem/scf/scf_common.cpp b/exachem/scf/scf_common.cpp
index 2c27c8f..6503b1d 100644
--- a/exachem/scf/scf_common.cpp
+++ b/exachem/scf/scf_common.cpp
@@ -95,16 +95,16 @@ std::tuple<size_t, double, double> exachem::scf::SCFUtil::gensqrtinv(
       auto [na_rows, na_cols] = (*blockcyclic_dist).get_local_dims(N, N);
 
       // Set parameters
-      elpa_set(handle, "na", static_cast<int> N, &error);
-      elpa_set(handle, "nev", static_cast<int> N, &error);
-      elpa_set(handle, "local_nrows", static_cast<int> na_rows, &error);
-      elpa_set(handle, "local_ncols", static_cast<int> na_cols, &error);
-      elpa_set(handle, "nblk", static_cast<int> mb, &error);
+      elpa_set(handle, "na", static_cast<int>(N), &error);
+      elpa_set(handle, "nev", static_cast<int>(N), &error);
+      elpa_set(handle, "local_nrows", static_cast<int>(na_rows), &error);
+      elpa_set(handle, "local_ncols", static_cast<int>(na_cols), &error);
+      elpa_set(handle, "nblk", static_cast<int>(mb), &error);
       elpa_set(handle, "mpi_comm_parent", scalapack_info.pg.comm_c2f(), &error);
-      elpa_set(handle, "process_row", static_cast<int> grid.ipr(), &error);
-      elpa_set(handle, "process_col", static_cast<int> grid.ipc(), &error);
+      elpa_set(handle, "process_row", static_cast<int>(grid.ipr()), &error);
+      elpa_set(handle, "process_col", static_cast<int>(grid.ipc()), &error);
 #if defined(USE_CUDA)
-      elpa_set(handle, "nvidia-gpu", static_cast<int> 1, &error);
+      elpa_set(handle, "nvidia-gpu", static_cast<int>(1), &error);
       // elpa_set(handle, "use_gpu_id", 1, &error);
 #endif
       error = elpa_setup(handle);
@@ -412,4 +412,4 @@ template std::tuple<Matrix, size_t, double, double> exachem::scf::SCFUtil::gensq
   double threshold);
 template std::tuple<size_t, double, double> exachem::scf::SCFUtil::gensqrtinv<double>(
   ExecutionContext& ec, ChemEnv& chem_env, SCFData& scf_data, ScalapackInfo& scalapack_info,
-  TAMMTensors<double>& ttensors, bool symmetric, double threshold);
\ No newline at end of file
+  TAMMTensors<double>& ttensors, bool symmetric, double threshold);
diff --git a/exachem/scf/scf_guess.cpp b/exachem/scf/scf_guess.cpp
index 368ecc5..02740bc 100644
--- a/exachem/scf/scf_guess.cpp
+++ b/exachem/scf/scf_guess.cpp
@@ -681,14 +681,14 @@ void exachem::scf::SCFGuess<T>::scf_diagonalize(Scheduler& sch, const ChemEnv& c
       // Set parameters
       elpa_set(handle, "na", Northo, &error);
       elpa_set(handle, "nev", Northo, &error);
-      elpa_set(handle, "local_nrows", static_cast<int> na_rows, &error);
-      elpa_set(handle, "local_ncols", static_cast<int> na_cols, &error);
-      elpa_set(handle, "nblk", static_cast<int> mb, &error);
+      elpa_set(handle, "local_nrows", static_cast<int>(na_rows), &error);
+      elpa_set(handle, "local_ncols", static_cast<int>(na_cols), &error);
+      elpa_set(handle, "nblk", static_cast<int>(mb), &error);
       elpa_set(handle, "mpi_comm_parent", scalapack_info.pg.comm_c2f(), &error);
-      elpa_set(handle, "process_row", static_cast<int> grid.ipr(), &error);
-      elpa_set(handle, "process_col", static_cast<int> grid.ipc(), &error);
+      elpa_set(handle, "process_row", static_cast<int>(grid.ipr()), &error);
+      elpa_set(handle, "process_col", static_cast<int>(grid.ipc()), &error);
 #if defined(USE_CUDA)
-      elpa_set(handle, "nvidia-gpu", static_cast<int> 1, &error);
+      elpa_set(handle, "nvidia-gpu", static_cast<int>(1), &error);
       // elpa_set(handle, "use_gpu_id", 1, &error);
 #endif
       error = elpa_setup(handle);
@@ -773,14 +773,14 @@ void exachem::scf::SCFGuess<T>::scf_diagonalize(Scheduler& sch, const ChemEnv& c
         // Set parameters
         elpa_set(handle, "na", Northo, &error);
         elpa_set(handle, "nev", Northo, &error);
-        elpa_set(handle, "local_nrows", static_cast<int> na_rows, &error);
-        elpa_set(handle, "local_ncols", static_cast<int> na_cols, &error);
-        elpa_set(handle, "nblk", static_cast<int> mb, &error);
+        elpa_set(handle, "local_nrows", static_cast<int>(na_rows), &error);
+        elpa_set(handle, "local_ncols", static_cast<int>(na_cols), &error);
+        elpa_set(handle, "nblk", static_cast<int>(mb), &error);
         elpa_set(handle, "mpi_comm_parent", scalapack_info.pg.comm_c2f(), &error);
-        elpa_set(handle, "process_row", static_cast<int> grid.ipr(), &error);
-        elpa_set(handle, "process_col", static_cast<int> grid.ipc(), &error);
+        elpa_set(handle, "process_row", static_cast<int>(grid.ipr()), &error);
+        elpa_set(handle, "process_col", static_cast<int>(grid.ipc()), &error);
 #if defined(USE_CUDA)
-        elpa_set(handle, "nvidia-gpu", static_cast<int> 1, &error);
+        elpa_set(handle, "nvidia-gpu", static_cast<int>(1), &error);
         // elpa_set(handle, "use_gpu_id", 1, &error);
 #endif
         error = elpa_setup(handle);
@@ -1633,4 +1633,4 @@ void exachem::scf::SCFGuess<T>::t2e_hf_helper(const ExecutionContext& ec, tamm::
   Hbufv.shrink_to_fit();
 }
 
-template class exachem::scf::SCFGuess<double>;
\ No newline at end of file
+template class exachem::scf::SCFGuess<double>;
diff --git a/exachem/scf/scf_iter.cpp b/exachem/scf/scf_iter.cpp
index 2243af9..20002b8 100644
--- a/exachem/scf/scf_iter.cpp
+++ b/exachem/scf/scf_iter.cpp
@@ -619,14 +619,14 @@ void exachem::scf::SCFIter<T>::init_ri(ExecutionContext& ec, const ChemEnv& chem
       // Set parameters
       elpa_set(handle, "na", ndf, &error);
       elpa_set(handle, "nev", ndf, &error);
-      elpa_set(handle, "local_nrows", static_cast<int> na_rows, &error);
-      elpa_set(handle, "local_ncols", static_cast<int> na_cols, &error);
-      elpa_set(handle, "nblk", static_cast<int> mb, &error);
+      elpa_set(handle, "local_nrows", static_cast<int> (na_rows), &error);
+      elpa_set(handle, "local_ncols", static_cast<int> (na_cols), &error);
+      elpa_set(handle, "nblk", static_cast<int> (mb), &error);
       elpa_set(handle, "mpi_comm_parent", scalapack_info.pg.comm_c2f(), &error);
-      elpa_set(handle, "process_row", static_cast<int> grid.ipr(), &error);
-      elpa_set(handle, "process_col", static_cast<int> grid.ipc(), &error);
+      elpa_set(handle, "process_row", static_cast<int> (grid.ipr()), &error);
+      elpa_set(handle, "process_col", static_cast<int> (grid.ipc()), &error);
 #if defined(USE_CUDA)
-      elpa_set(handle, "nvidia-gpu", static_cast<int> 1, &error);
+      elpa_set(handle, "nvidia-gpu", static_cast<int>(1), &error);
       // elpa_set(handle, "use_gpu_id", 1, &error);
 #endif
       error = elpa_setup(handle);
